
Small_Os.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000a2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003d  00800060  00800060  00000a2a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000a2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000a78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012c8  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f7  00000000  00000000  00001f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a88  00000000  00000000  0000291f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000039c  00000000  00000000  000053a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000939  00000000  00000000  00005744  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019c8  00000000  00000000  0000607d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00007a45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 88 04 	jmp	0x910	; 0x910 <__vector_4>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3a 04 	jmp	0x874	; 0x874 <__vector_7>
  20:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__vector_8>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 13 04 	jmp	0x826	; 0x826 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ad 39       	cpi	r26, 0x9D	; 157
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  74:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <LED_1_1000mili_Periodic_HIGH_PER>:

/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/

void LED_1_1000mili_Periodic_HIGH_PER(void)
{
	DIO_INIT_Pin(1,OUTPUT);
  7c:	61 e0       	ldi	r22, 0x01	; 1
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_INIT_Pin>
    DIO_toggle_Pin(1);
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	0e 94 04 01 	call	0x208	; 0x208 <DIO_toggle_Pin>
  8a:	28 ee       	ldi	r18, 0xE8	; 232
  8c:	33 e0       	ldi	r19, 0x03	; 3
  8e:	03 c0       	rjmp	.+6      	; 0x96 <LED_1_1000mili_Periodic_HIGH_PER+0x1a>
	/***1 second execution time ***/
    for(int i=0;i<1000;i++)
  90:	21 50       	subi	r18, 0x01	; 1
  92:	31 09       	sbc	r19, r1
  94:	29 f0       	breq	.+10     	; 0xa0 <LED_1_1000mili_Periodic_HIGH_PER+0x24>
{
  96:	88 ee       	ldi	r24, 0xE8	; 232
  98:	93 e0       	ldi	r25, 0x03	; 3
	{
		for(int i=0;i<1000;i++);
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <LED_1_1000mili_Periodic_HIGH_PER+0x1e>
  9e:	f8 cf       	rjmp	.-16     	; 0x90 <LED_1_1000mili_Periodic_HIGH_PER+0x14>
	}
}
  a0:	08 95       	ret

000000a2 <LED_2_1000mili_Periodic_LOW_PER>:
void LED_2_1000mili_Periodic_LOW_PER(void)
{
	DIO_INIT_Pin(2,OUTPUT);
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_INIT_Pin>
    DIO_toggle_Pin(2);
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	0e 94 04 01 	call	0x208	; 0x208 <DIO_toggle_Pin>
}
  b0:	08 95       	ret

000000b2 <main>:
int main()
{
	/**Small Os create**/
    SOS_Init();
  b2:	0e 94 62 01 	call	0x2c4	; 0x2c4 <SOS_Init>
	/**Creat tasks**/ 
	SOS_Start(LED_2_1000mili_Periodic_LOW_PER,1000U,SOS_Function_PERIODIC,1);
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	50 e0       	ldi	r21, 0x00	; 0
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	68 ee       	ldi	r22, 0xE8	; 232
  c0:	73 e0       	ldi	r23, 0x03	; 3
  c2:	81 e5       	ldi	r24, 0x51	; 81
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <SOS_Start>
	SOS_Start(LED_1_1000mili_Periodic_HIGH_PER,1000U,SOS_Function_PERIODIC,0);
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	20 e0       	ldi	r18, 0x00	; 0
  ce:	50 e0       	ldi	r21, 0x00	; 0
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	68 ee       	ldi	r22, 0xE8	; 232
  d4:	73 e0       	ldi	r23, 0x03	; 3
  d6:	8e e3       	ldi	r24, 0x3E	; 62
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <SOS_Start>
	/*Start small OS dispatching**/
	SOS_Dispatch();
  de:	0e 94 66 02 	call	0x4cc	; 0x4cc <SOS_Dispatch>
}
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	08 95       	ret

000000e8 <DIO_INIT_Pin>:
}
uint8_t DIO_INIT_Pin(uint8_t pin, uint8_t direction)
{
	uint8_t por;

	if(pin>=PinsNeeded || pin>=No_of_pins ) return 0;
  e8:	80 32       	cpi	r24, 0x20	; 32
  ea:	08 f0       	brcs	.+2      	; 0xee <DIO_INIT_Pin+0x6>
  ec:	8b c0       	rjmp	.+278    	; 0x204 <DIO_INIT_Pin+0x11c>
    else
	{
	por='A'+pin/PortSize;
  ee:	28 2f       	mov	r18, r24
  f0:	26 95       	lsr	r18
  f2:	26 95       	lsr	r18
  f4:	26 95       	lsr	r18
  f6:	91 e4       	ldi	r25, 0x41	; 65
  f8:	92 0f       	add	r25, r18
	pin=pin%PortSize;
  fa:	87 70       	andi	r24, 0x07	; 7
	}
	
    switch(por)
  fc:	22 30       	cpi	r18, 0x02	; 2
  fe:	09 f4       	brne	.+2      	; 0x102 <DIO_INIT_Pin+0x1a>
 100:	45 c0       	rjmp	.+138    	; 0x18c <DIO_INIT_Pin+0xa4>
 102:	94 34       	cpi	r25, 0x44	; 68
 104:	08 f0       	brcs	.+2      	; 0x108 <DIO_INIT_Pin+0x20>
 106:	60 c0       	rjmp	.+192    	; 0x1c8 <DIO_INIT_Pin+0xe0>
 108:	91 34       	cpi	r25, 0x41	; 65
 10a:	a9 f0       	breq	.+42     	; 0x136 <DIO_INIT_Pin+0x4e>
 10c:	92 34       	cpi	r25, 0x42	; 66
 10e:	89 f4       	brne	.+34     	; 0x132 <DIO_INIT_Pin+0x4a>
    {
    case 'A': if(direction==0){CLR_BIT(DirectionRegisterA,pin);}else{SET_BIT(DirectionRegisterA,pin);}
              break;

    case 'B': if(direction==0){CLR_BIT(DirectionRegisterB,pin);}else{SET_BIT(DirectionRegisterB,pin);}
 110:	61 11       	cpse	r22, r1
 112:	2f c0       	rjmp	.+94     	; 0x172 <DIO_INIT_Pin+0x8a>
 114:	47 b3       	in	r20, 0x17	; 23
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	f9 01       	movw	r30, r18
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_INIT_Pin+0x3a>
 11e:	ee 0f       	add	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	8a 95       	dec	r24
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_INIT_Pin+0x36>
 126:	cf 01       	movw	r24, r30
 128:	80 95       	com	r24
 12a:	84 23       	and	r24, r20
 12c:	87 bb       	out	0x17, r24	; 23
#endif
	default :
	return ERROR_NOK;
	break;
	}
return ERROR_OK;
 12e:	86 2f       	mov	r24, r22
 130:	08 95       	ret
    switch(por)
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	08 95       	ret
    case 'A': if(direction==0){CLR_BIT(DirectionRegisterA,pin);}else{SET_BIT(DirectionRegisterA,pin);}
 136:	61 11       	cpse	r22, r1
 138:	0f c0       	rjmp	.+30     	; 0x158 <DIO_INIT_Pin+0x70>
 13a:	4a b3       	in	r20, 0x1a	; 26
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	f9 01       	movw	r30, r18
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_INIT_Pin+0x60>
 144:	ee 0f       	add	r30, r30
 146:	ff 1f       	adc	r31, r31
 148:	8a 95       	dec	r24
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_INIT_Pin+0x5c>
 14c:	cf 01       	movw	r24, r30
 14e:	80 95       	com	r24
 150:	84 23       	and	r24, r20
 152:	8a bb       	out	0x1a, r24	; 26
return ERROR_OK;
 154:	86 2f       	mov	r24, r22
 156:	08 95       	ret
    case 'A': if(direction==0){CLR_BIT(DirectionRegisterA,pin);}else{SET_BIT(DirectionRegisterA,pin);}
 158:	9a b3       	in	r25, 0x1a	; 26
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_INIT_Pin+0x7c>
 160:	22 0f       	add	r18, r18
 162:	33 1f       	adc	r19, r19
 164:	8a 95       	dec	r24
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_INIT_Pin+0x78>
 168:	89 2f       	mov	r24, r25
 16a:	82 2b       	or	r24, r18
 16c:	8a bb       	out	0x1a, r24	; 26
return ERROR_OK;
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	08 95       	ret
    case 'B': if(direction==0){CLR_BIT(DirectionRegisterB,pin);}else{SET_BIT(DirectionRegisterB,pin);}
 172:	97 b3       	in	r25, 0x17	; 23
 174:	21 e0       	ldi	r18, 0x01	; 1
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_INIT_Pin+0x96>
 17a:	22 0f       	add	r18, r18
 17c:	33 1f       	adc	r19, r19
 17e:	8a 95       	dec	r24
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_INIT_Pin+0x92>
 182:	89 2f       	mov	r24, r25
 184:	82 2b       	or	r24, r18
 186:	87 bb       	out	0x17, r24	; 23
return ERROR_OK;
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	08 95       	ret
    case 'C': if(direction==0){CLR_BIT(DirectionRegisterC,pin);}else{SET_BIT(DirectionRegisterC,pin);}
 18c:	61 11       	cpse	r22, r1
 18e:	0f c0       	rjmp	.+30     	; 0x1ae <DIO_INIT_Pin+0xc6>
 190:	44 b3       	in	r20, 0x14	; 20
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	f9 01       	movw	r30, r18
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_INIT_Pin+0xb6>
 19a:	ee 0f       	add	r30, r30
 19c:	ff 1f       	adc	r31, r31
 19e:	8a 95       	dec	r24
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_INIT_Pin+0xb2>
 1a2:	cf 01       	movw	r24, r30
 1a4:	80 95       	com	r24
 1a6:	84 23       	and	r24, r20
 1a8:	84 bb       	out	0x14, r24	; 20
return ERROR_OK;
 1aa:	86 2f       	mov	r24, r22
 1ac:	08 95       	ret
    case 'C': if(direction==0){CLR_BIT(DirectionRegisterC,pin);}else{SET_BIT(DirectionRegisterC,pin);}
 1ae:	94 b3       	in	r25, 0x14	; 20
 1b0:	21 e0       	ldi	r18, 0x01	; 1
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_INIT_Pin+0xd2>
 1b6:	22 0f       	add	r18, r18
 1b8:	33 1f       	adc	r19, r19
 1ba:	8a 95       	dec	r24
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_INIT_Pin+0xce>
 1be:	89 2f       	mov	r24, r25
 1c0:	82 2b       	or	r24, r18
 1c2:	84 bb       	out	0x14, r24	; 20
return ERROR_OK;
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	08 95       	ret
    case 'D': if(direction==0){CLR_BIT(DirectionRegisterD,pin);}else{SET_BIT(DirectionRegisterD,pin);}
 1c8:	61 11       	cpse	r22, r1
 1ca:	0f c0       	rjmp	.+30     	; 0x1ea <DIO_INIT_Pin+0x102>
 1cc:	41 b3       	in	r20, 0x11	; 17
 1ce:	21 e0       	ldi	r18, 0x01	; 1
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	b9 01       	movw	r22, r18
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_INIT_Pin+0xf2>
 1d6:	66 0f       	add	r22, r22
 1d8:	77 1f       	adc	r23, r23
 1da:	8a 95       	dec	r24
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_INIT_Pin+0xee>
 1de:	cb 01       	movw	r24, r22
 1e0:	80 95       	com	r24
 1e2:	84 23       	and	r24, r20
 1e4:	81 bb       	out	0x11, r24	; 17
	return ERROR_NOK;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	08 95       	ret
    case 'D': if(direction==0){CLR_BIT(DirectionRegisterD,pin);}else{SET_BIT(DirectionRegisterD,pin);}
 1ea:	91 b3       	in	r25, 0x11	; 17
 1ec:	21 e0       	ldi	r18, 0x01	; 1
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_INIT_Pin+0x10e>
 1f2:	22 0f       	add	r18, r18
 1f4:	33 1f       	adc	r19, r19
 1f6:	8a 95       	dec	r24
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_INIT_Pin+0x10a>
 1fa:	89 2f       	mov	r24, r25
 1fc:	82 2b       	or	r24, r18
 1fe:	81 bb       	out	0x11, r24	; 17
	return ERROR_NOK;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	08 95       	ret
	if(pin>=PinsNeeded || pin>=No_of_pins ) return 0;
 204:	80 e0       	ldi	r24, 0x00	; 0
}
 206:	08 95       	ret

00000208 <DIO_toggle_Pin>:
return ERROR_OK;
}
uint8_t DIO_toggle_Pin(uint8_t pin)
{
	uint8_t por;
	if(pin>=PinsNeeded || pin>=No_of_pins ) return ERROR_NOK;
 208:	80 32       	cpi	r24, 0x20	; 32
 20a:	08 f0       	brcs	.+2      	; 0x20e <DIO_toggle_Pin+0x6>
 20c:	45 c0       	rjmp	.+138    	; 0x298 <DIO_toggle_Pin+0x90>
	else
	{
		por='A'+pin/PortSize;
 20e:	28 2f       	mov	r18, r24
 210:	26 95       	lsr	r18
 212:	26 95       	lsr	r18
 214:	26 95       	lsr	r18
 216:	91 e4       	ldi	r25, 0x41	; 65
 218:	92 0f       	add	r25, r18
		pin=pin%PortSize;
 21a:	87 70       	andi	r24, 0x07	; 7
	}
	
	switch(por)
 21c:	22 30       	cpi	r18, 0x02	; 2
 21e:	11 f1       	breq	.+68     	; 0x264 <DIO_toggle_Pin+0x5c>
 220:	94 34       	cpi	r25, 0x44	; 68
 222:	68 f5       	brcc	.+90     	; 0x27e <DIO_toggle_Pin+0x76>
 224:	91 34       	cpi	r25, 0x41	; 65
 226:	89 f0       	breq	.+34     	; 0x24a <DIO_toggle_Pin+0x42>
 228:	92 34       	cpi	r25, 0x42	; 66
 22a:	69 f4       	brne	.+26     	; 0x246 <DIO_toggle_Pin+0x3e>
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
 22c:	98 b3       	in	r25, 0x18	; 24
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_toggle_Pin+0x30>
 234:	22 0f       	add	r18, r18
 236:	33 1f       	adc	r19, r19
 238:	8a 95       	dec	r24
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_toggle_Pin+0x2c>
 23c:	89 2f       	mov	r24, r25
 23e:	82 27       	eor	r24, r18
 240:	88 bb       	out	0x18, r24	; 24
		default :
		return ERROR_NOK;
		break;
		
	}
	return ERROR_OK;
 242:	80 e0       	ldi	r24, 0x00	; 0
			 break;
 244:	08 95       	ret
	switch(por)
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	08 95       	ret
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
 24a:	9b b3       	in	r25, 0x1b	; 27
 24c:	21 e0       	ldi	r18, 0x01	; 1
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_toggle_Pin+0x4e>
 252:	22 0f       	add	r18, r18
 254:	33 1f       	adc	r19, r19
 256:	8a 95       	dec	r24
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_toggle_Pin+0x4a>
 25a:	89 2f       	mov	r24, r25
 25c:	82 27       	eor	r24, r18
 25e:	8b bb       	out	0x1b, r24	; 27
	return ERROR_OK;
 260:	80 e0       	ldi	r24, 0x00	; 0
			 break;
 262:	08 95       	ret
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
 264:	95 b3       	in	r25, 0x15	; 21
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_toggle_Pin+0x68>
 26c:	22 0f       	add	r18, r18
 26e:	33 1f       	adc	r19, r19
 270:	8a 95       	dec	r24
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_toggle_Pin+0x64>
 274:	89 2f       	mov	r24, r25
 276:	82 27       	eor	r24, r18
 278:	85 bb       	out	0x15, r24	; 21
	return ERROR_OK;
 27a:	80 e0       	ldi	r24, 0x00	; 0
			 break;
 27c:	08 95       	ret
		case 'D':TOGGLE_BIT(WriteRegisterD,pin);
 27e:	92 b3       	in	r25, 0x12	; 18
 280:	21 e0       	ldi	r18, 0x01	; 1
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_toggle_Pin+0x82>
 286:	22 0f       	add	r18, r18
 288:	33 1f       	adc	r19, r19
 28a:	8a 95       	dec	r24
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_toggle_Pin+0x7e>
 28e:	89 2f       	mov	r24, r25
 290:	82 27       	eor	r24, r18
 292:	82 bb       	out	0x12, r24	; 18
	return ERROR_OK;
 294:	80 e0       	ldi	r24, 0x00	; 0
			 break;
 296:	08 95       	ret
	if(pin>=PinsNeeded || pin>=No_of_pins ) return ERROR_NOK;
 298:	81 e0       	ldi	r24, 0x01	; 1
}
 29a:	08 95       	ret

0000029c <SOS_Function_ISR>:

/***Function that will be passed to Timer ISR from SOS***/

void  SOS_Function_ISR(void)
{
    sgu64_SOS_Timer_ISR_Count++;
 29c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 2a0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 2a4:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <_edata+0x2>
 2a8:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <_edata+0x3>
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	a1 1d       	adc	r26, r1
 2b0:	b1 1d       	adc	r27, r1
 2b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 2b6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 2ba:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <_edata+0x2>
 2be:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <_edata+0x3>
}
 2c2:	08 95       	ret

000002c4 <SOS_Init>:

/*- APIs IMPLEMENTATION -----------------------------------*/
/**SOS initalization happens by this API below**/
/** set configuration of timer OS      **/
SOS_Error_t SOS_Init()
{
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	00 d0       	rcall	.+0      	; 0x2ca <SOS_Init+0x6>
 2ca:	00 d0       	rcall	.+0      	; 0x2cc <SOS_Init+0x8>
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
	StrSOS_Configuration_t strSOS_configuration;
	
	strSOS_configuration.SOS_TIMER_IDS=SOS_TIMER_ID0;
 2d0:	19 82       	std	Y+1, r1	; 0x01
	/*******************************************
	 *  Clock prescaler is adjusted internally *
	 *           no need to enter it           *  
	 *******************************************/
	strSOS_configuration.SOS_TIMER_PSC=SOS_NO_NEED_PSC;
 2d2:	1a 82       	std	Y+2, r1	; 0x02
	strSOS_configuration.SOS_TIMER_MODE=SOS_TIMER_MODE_MILIE;
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	8b 83       	std	Y+3, r24	; 0x03
	strSOS_configuration.SOS_TIMER_INT_Mode=SOS_TIMER_INT;
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	8c 83       	std	Y+4, r24	; 0x04
	
	Timer_Init(&strSOS_configuration);
 2dc:	ce 01       	movw	r24, r28
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	0e 94 38 03 	call	0x670	; 0x670 <Timer_Init>
	
	return SOS_Error_OK;
}
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
 2ec:	0f 90       	pop	r0
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <SOS_Start>:

/***Creat SOS tasks by By initalize array of task of SOS ****/ 
SOS_Error_t SOS_Start(PntrToFunc_t PntrToFunc_Copy_SOS_Start,uint16_t u16_Copy_Periodicity_MS_SOS_Start,uint16_t u16_Copy_Periodic_or_not_SOS_Start,uint16_t u16_Copy_SOS_TASK_Priority)
{
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	e8 2f       	mov	r30, r24
 2fe:	f9 2f       	mov	r31, r25
 300:	06 2f       	mov	r16, r22
 302:	17 2f       	mov	r17, r23
 304:	64 2f       	mov	r22, r20
 306:	75 2f       	mov	r23, r21
    SOS_Error_t SOS_Start_Error= SOS_Error_OK;
	
	if(sgu16_SOS_index>SOS_Events) SOS_Start_Error= SOS_Error_EXTRA_EVENTS;
 308:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <sgu16_SOS_index>
 30c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <sgu16_SOS_index+0x1>
 310:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <sgu16_SOS_index+0x2>
 314:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <sgu16_SOS_index+0x3>
 318:	84 30       	cpi	r24, 0x04	; 4
 31a:	91 05       	cpc	r25, r1
 31c:	a1 05       	cpc	r26, r1
 31e:	b1 05       	cpc	r27, r1
 320:	60 f5       	brcc	.+88     	; 0x37a <SOS_Start+0x86>
	else
	{  
        /**Check whether function that passed is nullpointer or not**/
		if(NullPointer!=PntrToFunc_Copy_SOS_Start)
 322:	30 97       	sbiw	r30, 0x00	; 0
 324:	81 f1       	breq	.+96     	; 0x386 <SOS_Start+0x92>
		{	
			sga_SOS_Events[sgu16_SOS_index].PntrToFunc=PntrToFunc_Copy_SOS_Start;	
 326:	ac 01       	movw	r20, r24
 328:	44 0f       	add	r20, r20
 32a:	55 1f       	adc	r21, r21
 32c:	48 0f       	add	r20, r24
 32e:	59 1f       	adc	r21, r25
 330:	44 0f       	add	r20, r20
 332:	55 1f       	adc	r21, r21
 334:	44 0f       	add	r20, r20
 336:	55 1f       	adc	r21, r21
 338:	48 59       	subi	r20, 0x98	; 152
 33a:	5f 4f       	sbci	r21, 0xFF	; 255
 33c:	ea 01       	movw	r28, r20
 33e:	fb 87       	std	Y+11, r31	; 0x0b
 340:	ea 87       	std	Y+10, r30	; 0x0a
			/**Check whether the function categorty of function is SOS_Function_ONESHOT or SOS_Function_PERIODIC**/
			if(u16_Copy_Periodic_or_not_SOS_Start==SOS_Function_ONESHOT || u16_Copy_Periodic_or_not_SOS_Start==SOS_Function_PERIODIC)
 342:	62 30       	cpi	r22, 0x02	; 2
 344:	71 05       	cpc	r23, r1
 346:	08 f5       	brcc	.+66     	; 0x38a <SOS_Start+0x96>
			{		
		
				sga_SOS_Events[sgu16_SOS_index].Periodic_or_not=u16_Copy_Periodic_or_not_SOS_Start;
 348:	68 83       	st	Y, r22
				sga_SOS_Events[sgu16_SOS_index].Priority=u16_Copy_SOS_TASK_Priority;
 34a:	29 83       	std	Y+1, r18	; 0x01
				/**Check whether the function periodicty more than 0 or not **/
				if(u16_Copy_Periodicity_MS_SOS_Start>0U)
 34c:	01 15       	cp	r16, r1
 34e:	11 05       	cpc	r17, r1
 350:	f1 f0       	breq	.+60     	; 0x38e <SOS_Start+0x9a>
				{
                    
					sga_SOS_Events[sgu16_SOS_index].Periodicity_MS=u16_Copy_Periodicity_MS_SOS_Start;
 352:	a8 01       	movw	r20, r16
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	4a 83       	std	Y+2, r20	; 0x02
 35a:	5b 83       	std	Y+3, r21	; 0x03
 35c:	6c 83       	std	Y+4, r22	; 0x04
 35e:	7d 83       	std	Y+5, r23	; 0x05
					sgu16_SOS_index++;	
 360:	01 96       	adiw	r24, 0x01	; 1
 362:	a1 1d       	adc	r26, r1
 364:	b1 1d       	adc	r27, r1
 366:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <sgu16_SOS_index>
 36a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <sgu16_SOS_index+0x1>
 36e:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <sgu16_SOS_index+0x2>
 372:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <sgu16_SOS_index+0x3>
    SOS_Error_t SOS_Start_Error= SOS_Error_OK;
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	01 c0       	rjmp	.+2      	; 0x37c <SOS_Start+0x88>
	if(sgu16_SOS_index>SOS_Events) SOS_Start_Error= SOS_Error_EXTRA_EVENTS;
 37a:	81 e0       	ldi	r24, 0x01	; 1
		{
			SOS_Start_Error=SOS_Error_Start_Null_func;
		}
	}
	return SOS_Start_Error;
}
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	1f 91       	pop	r17
 382:	0f 91       	pop	r16
 384:	08 95       	ret
			SOS_Start_Error=SOS_Error_Start_Null_func;
 386:	82 e0       	ldi	r24, 0x02	; 2
 388:	f9 cf       	rjmp	.-14     	; 0x37c <SOS_Start+0x88>
				SOS_Start_Error=SOS_Error_Function_type_undefined;
 38a:	84 e0       	ldi	r24, 0x04	; 4
 38c:	f7 cf       	rjmp	.-18     	; 0x37c <SOS_Start+0x88>
					SOS_Start_Error=SOS_Error_Function_Periodicity_Less_Than_OR_EQUAL_zero;
 38e:	86 e0       	ldi	r24, 0x06	; 6
	return SOS_Start_Error;
 390:	f5 cf       	rjmp	.-22     	; 0x37c <SOS_Start+0x88>

00000392 <SOS_Stop>:
    }
}

/***Stop Certain task from being servied by Dispatcher****/ 
SOS_Error_t SOS_Stop(PntrToFunc_t PntrToFunc_Copy_SOS_Start)
{
 392:	8f 92       	push	r8
 394:	9f 92       	push	r9
 396:	af 92       	push	r10
 398:	bf 92       	push	r11
 39a:	cf 92       	push	r12
 39c:	df 92       	push	r13
 39e:	ef 92       	push	r14
 3a0:	ff 92       	push	r15
 3a2:	28 2f       	mov	r18, r24
 3a4:	39 2f       	mov	r19, r25

    SOS_Error_t SOS_Dispatch_Error= SOS_Error_OK;
    /***Check whether is empty or not**/
	if(sgu16_SOS_index==0) SOS_Dispatch_Error=SOS_Error_Nothing_To_Stop;
 3a6:	c0 90 64 00 	lds	r12, 0x0064	; 0x800064 <sgu16_SOS_index>
 3aa:	d0 90 65 00 	lds	r13, 0x0065	; 0x800065 <sgu16_SOS_index+0x1>
 3ae:	e0 90 66 00 	lds	r14, 0x0066	; 0x800066 <sgu16_SOS_index+0x2>
 3b2:	f0 90 67 00 	lds	r15, 0x0067	; 0x800067 <sgu16_SOS_index+0x3>
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	c1 14       	cp	r12, r1
 3ba:	d1 04       	cpc	r13, r1
 3bc:	e1 04       	cpc	r14, r1
 3be:	f1 04       	cpc	r15, r1
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <SOS_Stop+0x32>
 3c2:	7b c0       	rjmp	.+246    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
	/***Else stop the task from being mangaed by dispatcher by removing it from array */
	else
	{
        /**Loop TO find the function that needed to be stopped**/
 		for(uint8_t u8_SOS_Stop_Index=0;u8_SOS_Stop_Index<sgu16_SOS_index;u8_SOS_Stop_Index++)
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	81 2c       	mov	r8, r1
 3c8:	91 2c       	mov	r9, r1
 3ca:	54 01       	movw	r10, r8
 3cc:	1d c0       	rjmp	.+58     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				 /**Else we don't need to arrange**/
				 else if(u8_SOS_Stop_Index == sgu16_SOS_index-1)
				 {  

                     /*Decrement the sgu16_SOS_index*/					 
					 sgu16_SOS_index--;
 3ce:	80 92 64 00 	sts	0x0064, r8	; 0x800064 <sgu16_SOS_index>
 3d2:	90 92 65 00 	sts	0x0065, r9	; 0x800065 <sgu16_SOS_index+0x1>
 3d6:	a0 92 66 00 	sts	0x0066, r10	; 0x800066 <sgu16_SOS_index+0x2>
 3da:	b0 92 67 00 	sts	0x0067, r11	; 0x800067 <sgu16_SOS_index+0x3>
    SOS_Error_t SOS_Dispatch_Error= SOS_Error_OK;
 3de:	80 e0       	ldi	r24, 0x00	; 0
     				 break;
 3e0:	6c c0       	rjmp	.+216    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 		for(uint8_t u8_SOS_Stop_Index=0;u8_SOS_Stop_Index<sgu16_SOS_index;u8_SOS_Stop_Index++)
 3e2:	8f 5f       	subi	r24, 0xFF	; 255
 3e4:	88 2e       	mov	r8, r24
 3e6:	91 2c       	mov	r9, r1
 3e8:	b1 2c       	mov	r11, r1
 3ea:	a1 2c       	mov	r10, r1
 3ec:	c0 90 64 00 	lds	r12, 0x0064	; 0x800064 <sgu16_SOS_index>
 3f0:	d0 90 65 00 	lds	r13, 0x0065	; 0x800065 <sgu16_SOS_index+0x1>
 3f4:	e0 90 66 00 	lds	r14, 0x0066	; 0x800066 <sgu16_SOS_index+0x2>
 3f8:	f0 90 67 00 	lds	r15, 0x0067	; 0x800067 <sgu16_SOS_index+0x3>
 3fc:	8c 14       	cp	r8, r12
 3fe:	9d 04       	cpc	r9, r13
 400:	ae 04       	cpc	r10, r14
 402:	bf 04       	cpc	r11, r15
 404:	08 f0       	brcs	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	58 c0       	rjmp	.+176    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
			if(sga_SOS_Events[u8_SOS_Stop_Index].PntrToFunc==PntrToFunc_Copy_SOS_Start) 
 408:	48 2f       	mov	r20, r24
 40a:	50 e0       	ldi	r21, 0x00	; 0
 40c:	fa 01       	movw	r30, r20
 40e:	ee 0f       	add	r30, r30
 410:	ff 1f       	adc	r31, r31
 412:	e4 0f       	add	r30, r20
 414:	f5 1f       	adc	r31, r21
 416:	ee 0f       	add	r30, r30
 418:	ff 1f       	adc	r31, r31
 41a:	ee 0f       	add	r30, r30
 41c:	ff 1f       	adc	r31, r31
 41e:	e8 59       	subi	r30, 0x98	; 152
 420:	ff 4f       	sbci	r31, 0xFF	; 255
 422:	42 85       	ldd	r20, Z+10	; 0x0a
 424:	53 85       	ldd	r21, Z+11	; 0x0b
 426:	42 17       	cp	r20, r18
 428:	53 07       	cpc	r21, r19
 42a:	d9 f6       	brne	.-74     	; 0x3e2 <SOS_Stop+0x50>
				 if(u8_SOS_Stop_Index != sgu16_SOS_index-1 )
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	c9 1a       	sub	r12, r25
 430:	d1 08       	sbc	r13, r1
 432:	e1 08       	sbc	r14, r1
 434:	f1 08       	sbc	r15, r1
 436:	c8 14       	cp	r12, r8
 438:	d9 04       	cpc	r13, r9
 43a:	ea 04       	cpc	r14, r10
 43c:	fb 04       	cpc	r15, r11
 43e:	39 f2       	breq	.-114    	; 0x3ce <SOS_Stop+0x3c>
         			sgu16_SOS_index--;
 440:	c0 92 64 00 	sts	0x0064, r12	; 0x800064 <sgu16_SOS_index>
 444:	d0 92 65 00 	sts	0x0065, r13	; 0x800065 <sgu16_SOS_index+0x1>
 448:	e0 92 66 00 	sts	0x0066, r14	; 0x800066 <sgu16_SOS_index+0x2>
 44c:	f0 92 67 00 	sts	0x0067, r15	; 0x800067 <sgu16_SOS_index+0x3>
 					while(u8_SOS_Stop_Index<sgu16_SOS_index )
 450:	48 2f       	mov	r20, r24
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	4c 15       	cp	r20, r12
 45a:	5d 05       	cpc	r21, r13
 45c:	6e 05       	cpc	r22, r14
 45e:	7f 05       	cpc	r23, r15
 460:	08 f0       	brcs	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 462:	bf cf       	rjmp	.-130    	; 0x3e2 <SOS_Stop+0x50>
					sga_SOS_Events[u8_SOS_Stop_Index]=sga_SOS_Events[u8_SOS_Stop_Index+1];
 464:	48 2f       	mov	r20, r24
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	da 01       	movw	r26, r20
 46a:	aa 0f       	add	r26, r26
 46c:	bb 1f       	adc	r27, r27
 46e:	a4 0f       	add	r26, r20
 470:	b5 1f       	adc	r27, r21
 472:	aa 0f       	add	r26, r26
 474:	bb 1f       	adc	r27, r27
 476:	aa 0f       	add	r26, r26
 478:	bb 1f       	adc	r27, r27
 47a:	a8 59       	subi	r26, 0x98	; 152
 47c:	bf 4f       	sbci	r27, 0xFF	; 255
 47e:	4f 5f       	subi	r20, 0xFF	; 255
 480:	5f 4f       	sbci	r21, 0xFF	; 255
 482:	fa 01       	movw	r30, r20
 484:	ee 0f       	add	r30, r30
 486:	ff 1f       	adc	r31, r31
 488:	e4 0f       	add	r30, r20
 48a:	f5 1f       	adc	r31, r21
 48c:	ee 0f       	add	r30, r30
 48e:	ff 1f       	adc	r31, r31
 490:	ee 0f       	add	r30, r30
 492:	ff 1f       	adc	r31, r31
 494:	e8 59       	subi	r30, 0x98	; 152
 496:	ff 4f       	sbci	r31, 0xFF	; 255
 498:	9c e0       	ldi	r25, 0x0C	; 12
 49a:	01 90       	ld	r0, Z+
 49c:	0d 92       	st	X+, r0
 49e:	9a 95       	dec	r25
 4a0:	e1 f7       	brne	.-8      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
					u8_SOS_Stop_Index++;
 4a2:	8f 5f       	subi	r24, 0xFF	; 255
 					while(u8_SOS_Stop_Index<sgu16_SOS_index )
 4a4:	48 2f       	mov	r20, r24
 4a6:	50 e0       	ldi	r21, 0x00	; 0
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	60 e0       	ldi	r22, 0x00	; 0
 4ac:	4c 15       	cp	r20, r12
 4ae:	5d 05       	cpc	r21, r13
 4b0:	6e 05       	cpc	r22, r14
 4b2:	7f 05       	cpc	r23, r15
 4b4:	b8 f2       	brcs	.-82     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 4b6:	95 cf       	rjmp	.-214    	; 0x3e2 <SOS_Stop+0x50>
    SOS_Error_t SOS_Dispatch_Error= SOS_Error_OK;
 4b8:	80 e0       	ldi	r24, 0x00	; 0
		}
	    
	}

	return SOS_Dispatch_Error;
}
 4ba:	ff 90       	pop	r15
 4bc:	ef 90       	pop	r14
 4be:	df 90       	pop	r13
 4c0:	cf 90       	pop	r12
 4c2:	bf 90       	pop	r11
 4c4:	af 90       	pop	r10
 4c6:	9f 90       	pop	r9
 4c8:	8f 90       	pop	r8
 4ca:	08 95       	ret

000004cc <SOS_Dispatch>:
{
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
 4d0:	cd b7       	in	r28, 0x3d	; 61
 4d2:	de b7       	in	r29, 0x3e	; 62
 4d4:	60 97       	sbiw	r28, 0x10	; 16
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	f8 94       	cli
 4da:	de bf       	out	0x3e, r29	; 62
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	cd bf       	out	0x3d, r28	; 61
    uint8_t u8_1st_oop_Dispatch_Flag=1;
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	b1 2c       	mov	r11, r1
 4e4:	0d c0       	rjmp	.+26     	; 0x500 <SOS_Dispatch+0x34>
		if((u8_1st_oop_Dispatch_Flag==1)&&(sgu16_SOS_index!=0))   
 4e6:	c0 90 64 00 	lds	r12, 0x0064	; 0x800064 <sgu16_SOS_index>
 4ea:	d0 90 65 00 	lds	r13, 0x0065	; 0x800065 <sgu16_SOS_index+0x1>
 4ee:	e0 90 66 00 	lds	r14, 0x0066	; 0x800066 <sgu16_SOS_index+0x2>
 4f2:	f0 90 67 00 	lds	r15, 0x0067	; 0x800067 <sgu16_SOS_index+0x3>
 4f6:	c1 14       	cp	r12, r1
 4f8:	d1 04       	cpc	r13, r1
 4fa:	e1 04       	cpc	r14, r1
 4fc:	f1 04       	cpc	r15, r1
 4fe:	89 f4       	brne	.+34     	; 0x522 <SOS_Dispatch+0x56>
 500:	81 30       	cpi	r24, 0x01	; 1
 502:	89 f3       	breq	.-30     	; 0x4e6 <SOS_Dispatch+0x1a>
		else if((u8_1st_oop_Dispatch_Flag==0)&&(sgu16_SOS_index!=0))
 504:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <sgu16_SOS_index>
 508:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <sgu16_SOS_index+0x1>
 50c:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <sgu16_SOS_index+0x2>
 510:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <sgu16_SOS_index+0x3>
 514:	89 2b       	or	r24, r25
 516:	8a 2b       	or	r24, r26
 518:	8b 2b       	or	r24, r27
 51a:	09 f0       	breq	.+2      	; 0x51e <SOS_Dispatch+0x52>
 51c:	52 c0       	rjmp	.+164    	; 0x5c2 <SOS_Dispatch+0xf6>
 51e:	8b 2d       	mov	r24, r11
 520:	ef cf       	rjmp	.-34     	; 0x500 <SOS_Dispatch+0x34>
 522:	6f ef       	ldi	r22, 0xFF	; 255
 524:	6c 0d       	add	r22, r12
 526:	06 2f       	mov	r16, r22
 528:	00 0f       	add	r16, r16
 52a:	11 0b       	sbc	r17, r17
 52c:	06 0f       	add	r16, r22
 52e:	11 1d       	adc	r17, r1
 530:	67 fd       	sbrc	r22, 7
 532:	1a 95       	dec	r17
 534:	00 0f       	add	r16, r16
 536:	11 1f       	adc	r17, r17
 538:	00 0f       	add	r16, r16
 53a:	11 1f       	adc	r17, r17
 53c:	04 5a       	subi	r16, 0xA4	; 164
 53e:	1f 4f       	sbci	r17, 0xFF	; 255
		 	for(int8_t s8_iteration=0; s8_iteration<sgu16_SOS_index;s8_iteration++)
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	32 c0       	rjmp	.+100    	; 0x5a8 <SOS_Dispatch+0xdc>
				for(int8_t s8_i=sgu16_SOS_index-1;s8_i>s8_iteration;s8_i--)
 544:	21 50       	subi	r18, 0x01	; 1
 546:	0c 97       	sbiw	r24, 0x0c	; 12
 548:	32 17       	cp	r19, r18
 54a:	14 f5       	brge	.+68     	; 0x590 <SOS_Dispatch+0xc4>
					if(sga_SOS_Events[s8_i].Priority<sga_SOS_Events[s8_i-1].Priority)  
 54c:	dc 01       	movw	r26, r24
 54e:	1d 96       	adiw	r26, 0x0d	; 13
 550:	5c 91       	ld	r21, X
 552:	1d 97       	sbiw	r26, 0x0d	; 13
 554:	11 96       	adiw	r26, 0x01	; 1
 556:	4c 91       	ld	r20, X
 558:	54 17       	cp	r21, r20
 55a:	a0 f7       	brcc	.-24     	; 0x544 <SOS_Dispatch+0x78>
						SOS_Node_t_Buffer=sga_SOS_Events[s8_i];
 55c:	4c e0       	ldi	r20, 0x0C	; 12
 55e:	fc 01       	movw	r30, r24
 560:	3c 96       	adiw	r30, 0x0c	; 12
 562:	de 01       	movw	r26, r28
 564:	11 96       	adiw	r26, 0x01	; 1
 566:	01 90       	ld	r0, Z+
 568:	0d 92       	st	X+, r0
 56a:	4a 95       	dec	r20
 56c:	e1 f7       	brne	.-8      	; 0x566 <SOS_Dispatch+0x9a>
						sga_SOS_Events[s8_i]=sga_SOS_Events[s8_i-1];
 56e:	4c e0       	ldi	r20, 0x0C	; 12
 570:	fc 01       	movw	r30, r24
 572:	dc 01       	movw	r26, r24
 574:	1c 96       	adiw	r26, 0x0c	; 12
 576:	01 90       	ld	r0, Z+
 578:	0d 92       	st	X+, r0
 57a:	4a 95       	dec	r20
 57c:	e1 f7       	brne	.-8      	; 0x576 <SOS_Dispatch+0xaa>
						sga_SOS_Events[s8_i-1]=SOS_Node_t_Buffer;
 57e:	4c e0       	ldi	r20, 0x0C	; 12
 580:	fe 01       	movw	r30, r28
 582:	31 96       	adiw	r30, 0x01	; 1
 584:	dc 01       	movw	r26, r24
 586:	01 90       	ld	r0, Z+
 588:	0d 92       	st	X+, r0
 58a:	4a 95       	dec	r20
 58c:	e1 f7       	brne	.-8      	; 0x586 <SOS_Dispatch+0xba>
 58e:	da cf       	rjmp	.-76     	; 0x544 <SOS_Dispatch+0x78>
		 	for(int8_t s8_iteration=0; s8_iteration<sgu16_SOS_index;s8_iteration++)
 590:	3f 5f       	subi	r19, 0xFF	; 255
 592:	83 2f       	mov	r24, r19
 594:	03 2e       	mov	r0, r19
 596:	00 0c       	add	r0, r0
 598:	99 0b       	sbc	r25, r25
 59a:	aa 0b       	sbc	r26, r26
 59c:	bb 0b       	sbc	r27, r27
 59e:	8c 15       	cp	r24, r12
 5a0:	9d 05       	cpc	r25, r13
 5a2:	ae 05       	cpc	r26, r14
 5a4:	bf 05       	cpc	r27, r15
 5a6:	28 f4       	brcc	.+10     	; 0x5b2 <SOS_Dispatch+0xe6>
				for(int8_t s8_i=sgu16_SOS_index-1;s8_i>s8_iteration;s8_i--)
 5a8:	36 17       	cp	r19, r22
 5aa:	94 f7       	brge	.-28     	; 0x590 <SOS_Dispatch+0xc4>
 5ac:	c8 01       	movw	r24, r16
 5ae:	26 2f       	mov	r18, r22
 5b0:	cd cf       	rjmp	.-102    	; 0x54c <SOS_Dispatch+0x80>
			Timer_Start(TIMER0,0,SOS_Function_ISR);
 5b2:	4e e4       	ldi	r20, 0x4E	; 78
 5b4:	51 e0       	ldi	r21, 0x01	; 1
 5b6:	70 e0       	ldi	r23, 0x00	; 0
 5b8:	60 e0       	ldi	r22, 0x00	; 0
 5ba:	8b 2d       	mov	r24, r11
 5bc:	0e 94 86 03 	call	0x70c	; 0x70c <Timer_Start>
		if((u8_1st_oop_Dispatch_Flag==1)&&(sgu16_SOS_index!=0))   
 5c0:	a1 cf       	rjmp	.-190    	; 0x504 <SOS_Dispatch+0x38>
			u64_SOS_COUNT=sgu64_SOS_Timer_ISR_Count;
 5c2:	40 90 60 00 	lds	r4, 0x0060	; 0x800060 <_edata>
 5c6:	50 90 61 00 	lds	r5, 0x0061	; 0x800061 <_edata+0x1>
 5ca:	60 90 62 00 	lds	r6, 0x0062	; 0x800062 <_edata+0x2>
 5ce:	70 90 63 00 	lds	r7, 0x0063	; 0x800063 <_edata+0x3>
			for(uint64_t u64_i=0;u64_i<sgu16_SOS_index;u64_i++)
 5d2:	08 e6       	ldi	r16, 0x68	; 104
 5d4:	10 e0       	ldi	r17, 0x00	; 0
 5d6:	c1 2c       	mov	r12, r1
 5d8:	d1 2c       	mov	r13, r1
 5da:	76 01       	movw	r14, r12
 5dc:	14 c0       	rjmp	.+40     	; 0x606 <SOS_Dispatch+0x13a>
 5de:	bf ef       	ldi	r27, 0xFF	; 255
 5e0:	cb 1a       	sub	r12, r27
 5e2:	db 0a       	sbc	r13, r27
 5e4:	eb 0a       	sbc	r14, r27
 5e6:	fb 0a       	sbc	r15, r27
 5e8:	04 5f       	subi	r16, 0xF4	; 244
 5ea:	1f 4f       	sbci	r17, 0xFF	; 255
 5ec:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <sgu16_SOS_index>
 5f0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <sgu16_SOS_index+0x1>
 5f4:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <sgu16_SOS_index+0x2>
 5f8:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <sgu16_SOS_index+0x3>
 5fc:	c8 16       	cp	r12, r24
 5fe:	d9 06       	cpc	r13, r25
 600:	ea 06       	cpc	r14, r26
 602:	fb 06       	cpc	r15, r27
 604:	98 f5       	brcc	.+102    	; 0x66c <SOS_Dispatch+0x1a0>
				u64_Dispatch_Func_Count=((sga_SOS_Events[u64_i].Period_Count)+1)*sga_SOS_Events[u64_i].Periodicity_MS;
 606:	f8 01       	movw	r30, r16
 608:	26 81       	ldd	r18, Z+6	; 0x06
 60a:	37 81       	ldd	r19, Z+7	; 0x07
 60c:	40 85       	ldd	r20, Z+8	; 0x08
 60e:	51 85       	ldd	r21, Z+9	; 0x09
 610:	2f 5f       	subi	r18, 0xFF	; 255
 612:	3f 4f       	sbci	r19, 0xFF	; 255
 614:	4f 4f       	sbci	r20, 0xFF	; 255
 616:	5f 4f       	sbci	r21, 0xFF	; 255
 618:	82 81       	ldd	r24, Z+2	; 0x02
 61a:	93 81       	ldd	r25, Z+3	; 0x03
 61c:	a4 81       	ldd	r26, Z+4	; 0x04
 61e:	b5 81       	ldd	r27, Z+5	; 0x05
 620:	bc 01       	movw	r22, r24
 622:	cd 01       	movw	r24, r26
 624:	0e 94 af 04 	call	0x95e	; 0x95e <__mulsi3>
 628:	6d 87       	std	Y+13, r22	; 0x0d
 62a:	7e 87       	std	Y+14, r23	; 0x0e
 62c:	8f 87       	std	Y+15, r24	; 0x0f
 62e:	98 8b       	std	Y+16, r25	; 0x10
				if((u64_Dispatch_Func_Count==u64_SOS_COUNT))
 630:	46 16       	cp	r4, r22
 632:	57 06       	cpc	r5, r23
 634:	68 06       	cpc	r6, r24
 636:	79 06       	cpc	r7, r25
 638:	91 f6       	brne	.-92     	; 0x5de <SOS_Dispatch+0x112>
					sga_SOS_Events[u64_i].PntrToFunc();/*Executing...................*/
 63a:	02 84       	ldd	r0, Z+10	; 0x0a
 63c:	f3 85       	ldd	r31, Z+11	; 0x0b
 63e:	e0 2d       	mov	r30, r0
 640:	09 95       	icall
					sga_SOS_Events[u64_i].Period_Count=sga_SOS_Events[u64_i].Period_Count+1;
 642:	f8 01       	movw	r30, r16
 644:	86 81       	ldd	r24, Z+6	; 0x06
 646:	97 81       	ldd	r25, Z+7	; 0x07
 648:	a0 85       	ldd	r26, Z+8	; 0x08
 64a:	b1 85       	ldd	r27, Z+9	; 0x09
 64c:	01 96       	adiw	r24, 0x01	; 1
 64e:	a1 1d       	adc	r26, r1
 650:	b1 1d       	adc	r27, r1
 652:	86 83       	std	Z+6, r24	; 0x06
 654:	97 83       	std	Z+7, r25	; 0x07
 656:	a0 87       	std	Z+8, r26	; 0x08
 658:	b1 87       	std	Z+9, r27	; 0x09
  					if(sga_SOS_Events[u64_i].Periodic_or_not==SOS_Function_ONESHOT)
 65a:	80 81       	ld	r24, Z
 65c:	81 30       	cpi	r24, 0x01	; 1
 65e:	09 f0       	breq	.+2      	; 0x662 <SOS_Dispatch+0x196>
 660:	be cf       	rjmp	.-132    	; 0x5de <SOS_Dispatch+0x112>
						SOS_Stop(sga_SOS_Events[u64_i].PntrToFunc);
 662:	82 85       	ldd	r24, Z+10	; 0x0a
 664:	93 85       	ldd	r25, Z+11	; 0x0b
 666:	0e 94 c9 01 	call	0x392	; 0x392 <SOS_Stop>
 66a:	b9 cf       	rjmp	.-142    	; 0x5de <SOS_Dispatch+0x112>
 66c:	8b 2d       	mov	r24, r11
 66e:	48 cf       	rjmp	.-368    	; 0x500 <SOS_Dispatch+0x34>

00000670 <Timer_Init>:


/*- APIs IMPLEMENTATION -----------------------------------*/
	
uint8_t Timer_Init(StrTimerConfiguration_t* ps_Copy_Measurement_ECU_TIMER_Init_Config)
{
 670:	e8 2f       	mov	r30, r24
 672:	f9 2f       	mov	r31, r25
	
	if(NullPointer!=ps_Copy_Measurement_ECU_TIMER_Init_Config)
 674:	30 97       	sbiw	r30, 0x00	; 0
 676:	09 f4       	brne	.+2      	; 0x67a <Timer_Init+0xa>
 678:	3f c0       	rjmp	.+126    	; 0x6f8 <Timer_Init+0x88>
	{
		
		/*To Check whether the structure values that have been passed is in the scope of configuration nor not*/
		if(sgau8_TIMERChannel[ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel]==TIMER_Enable)            return TIMER_ERROR_NOK;	
 67a:	90 81       	ld	r25, Z
 67c:	29 2f       	mov	r18, r25
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	d9 01       	movw	r26, r18
 682:	ac 56       	subi	r26, 0x6C	; 108
 684:	bf 4f       	sbci	r27, 0xFF	; 255
 686:	8c 91       	ld	r24, X
 688:	81 30       	cpi	r24, 0x01	; 1
 68a:	f1 f0       	breq	.+60     	; 0x6c8 <Timer_Init+0x58>
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel >TIMER2  )                              return TIMER_ERROR_NOK;	
 68c:	93 30       	cpi	r25, 0x03	; 3
 68e:	b0 f5       	brcc	.+108    	; 0x6fc <Timer_Init+0x8c>
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Mode>TIMER_MODE_MILIE )                         return TIMER_ERROR_NOK;
 690:	82 81       	ldd	r24, Z+2	; 0x02
 692:	83 30       	cpi	r24, 0x03	; 3
 694:	a8 f5       	brcc	.+106    	; 0x700 <Timer_Init+0x90>
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Interrupt_Mode>INTERRUPT)                             return TIMER_ERROR_NOK;
 696:	43 81       	ldd	r20, Z+3	; 0x03
 698:	42 30       	cpi	r20, 0x02	; 2
 69a:	a0 f5       	brcc	.+104    	; 0x704 <Timer_Init+0x94>
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Psc >  Max_Prescaler_possiblities   )           return TIMER_ERROR_NOK;
 69c:	51 81       	ldd	r21, Z+1	; 0x01
 69e:	58 30       	cpi	r21, 0x08	; 8
 6a0:	98 f5       	brcc	.+102    	; 0x708 <Timer_Init+0x98>
	
		/*Adjust the configurations*/
		
		sgau8_TIMERChannel[ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel]=TIMER_Enable;		
 6a2:	d9 01       	movw	r26, r18
 6a4:	ac 56       	subi	r26, 0x6C	; 108
 6a6:	bf 4f       	sbci	r27, 0xFF	; 255
 6a8:	61 e0       	ldi	r22, 0x01	; 1
 6aa:	6c 93       	st	X, r22
		sgau8_TIMERMode[ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel]=ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Mode;
 6ac:	d9 01       	movw	r26, r18
 6ae:	a9 56       	subi	r26, 0x69	; 105
 6b0:	bf 4f       	sbci	r27, 0xFF	; 255
 6b2:	8c 93       	st	X, r24
		sgau8_Interrupt_Mode[ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel]=ps_Copy_Measurement_ECU_TIMER_Init_Config->Interrupt_Mode;
 6b4:	26 56       	subi	r18, 0x66	; 102
 6b6:	3f 4f       	sbci	r19, 0xFF	; 255
 6b8:	d9 01       	movw	r26, r18
 6ba:	4c 93       	st	X, r20
		sgau8_TIMERPrescaler[ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel]=ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Psc;
		
    
		
		/*In the mode of counter mode the prescaler is entered by the user */
		if((ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Mode)==COUNTER_MODE)
 6bc:	81 30       	cpi	r24, 0x01	; 1
 6be:	29 f0       	breq	.+10     	; 0x6ca <Timer_Init+0x5a>
			 * the delay is in micro or milie
			 *************************************************************************/
		}

		/*Check IF mode of Interrupt is enabled*/
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Interrupt_Mode==INTERRUPT)
 6c0:	83 81       	ldd	r24, Z+3	; 0x03
 6c2:	81 30       	cpi	r24, 0x01	; 1
 6c4:	a1 f0       	breq	.+40     	; 0x6ee <Timer_Init+0x7e>
	}
	else
	{
		
	}
	return TIMER_ERROR_OK;
 6c6:	80 e0       	ldi	r24, 0x00	; 0
}
 6c8:	08 95       	ret
			switch(ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel)
 6ca:	91 30       	cpi	r25, 0x01	; 1
 6cc:	41 f0       	breq	.+16     	; 0x6de <Timer_Init+0x6e>
 6ce:	92 30       	cpi	r25, 0x02	; 2
 6d0:	51 f0       	breq	.+20     	; 0x6e6 <Timer_Init+0x76>
 6d2:	91 11       	cpse	r25, r1
 6d4:	f9 cf       	rjmp	.-14     	; 0x6c8 <Timer_Init+0x58>
					TIMER0_CNTRL_REG  |=ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Psc;
 6d6:	83 b7       	in	r24, 0x33	; 51
 6d8:	58 2b       	or	r21, r24
 6da:	53 bf       	out	0x33, r21	; 51
				break;
 6dc:	f1 cf       	rjmp	.-30     	; 0x6c0 <Timer_Init+0x50>
					TIMER1_CNTRL_REG_B|=ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Psc;
 6de:	8e b5       	in	r24, 0x2e	; 46
 6e0:	58 2b       	or	r21, r24
 6e2:	5e bd       	out	0x2e, r21	; 46
				break;
 6e4:	ed cf       	rjmp	.-38     	; 0x6c0 <Timer_Init+0x50>
				     TIMER2_CNTRL_REG|=ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Psc;
 6e6:	85 b5       	in	r24, 0x25	; 37
 6e8:	58 2b       	or	r21, r24
 6ea:	55 bd       	out	0x25, r21	; 37
				break;
 6ec:	e9 cf       	rjmp	.-46     	; 0x6c0 <Timer_Init+0x50>
				  EnableGeneralInterrupt();
 6ee:	8f b7       	in	r24, 0x3f	; 63
 6f0:	80 68       	ori	r24, 0x80	; 128
 6f2:	8f bf       	out	0x3f, r24	; 63
	return TIMER_ERROR_OK;
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	08 95       	ret
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	08 95       	ret
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel >TIMER2  )                              return TIMER_ERROR_NOK;	
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	08 95       	ret
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Mode>TIMER_MODE_MILIE )                         return TIMER_ERROR_NOK;
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	08 95       	ret
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Interrupt_Mode>INTERRUPT)                             return TIMER_ERROR_NOK;
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	08 95       	ret
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Psc >  Max_Prescaler_possiblities   )           return TIMER_ERROR_NOK;
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	08 95       	ret

0000070c <Timer_Start>:

uint8_t Timer_Start(uint8_t u8_Copy_TIMER_Start_TIMERChannel,uint32_t u32_Copy_TIMER_Start_tickCounts,PntrToFunc_t PntrToFunc_t_Copy_TIMER_Start_ISR)//with sgau8_Prescaler
{
 70c:	98 2f       	mov	r25, r24
 70e:	26 2f       	mov	r18, r22
 710:	37 2f       	mov	r19, r23
 712:	64 2f       	mov	r22, r20
 714:	75 2f       	mov	r23, r21
	
	uint16_t u16_Count_TIMER_Start=0;
	
	switch(u8_Copy_TIMER_Start_TIMERChannel)
 716:	81 11       	cpse	r24, r1
 718:	84 c0       	rjmp	.+264    	; 0x822 <Timer_Start+0x116>
	{
		case TIMER0:
		{
			TIMER0_CNTRL_REG|=TIMER0_CNTRL_REG_CTC_MODE_VALUE;
 71a:	83 b7       	in	r24, 0x33	; 51
 71c:	88 60       	ori	r24, 0x08	; 8
 71e:	83 bf       	out	0x33, r24	; 51
			/*Check whether it is counter or timer*/
			if(sgau8_TIMERMode[TIMER0]!=COUNTER_MODE)
 720:	40 91 97 00 	lds	r20, 0x0097	; 0x800097 <sgau8_TIMERMode>
 724:	41 30       	cpi	r20, 0x01	; 1
 726:	09 f4       	brne	.+2      	; 0x72a <Timer_Start+0x1e>
 728:	5f c0       	rjmp	.+190    	; 0x7e8 <Timer_Start+0xdc>
			{
				/* Check whether it is time delay in mili or in micro */
				if(sgau8_TIMERMode[TIMER0]==TIMER_MODE_MICRO)
 72a:	41 11       	cpse	r20, r1
 72c:	2d c0       	rjmp	.+90     	; 0x788 <Timer_Start+0x7c>
				{ 
						/************************************************************
						 * The prescale divide by 8 and  make count =1 and  the 
						 * counter =255-1 to get overflow every micro
						 ************************************************************/
						TIMER0_CNTRL_REG|=F_CPU_CLOCK_8_TIMER_0;	
 72e:	83 b7       	in	r24, 0x33	; 51
 730:	82 60       	ori	r24, 0x02	; 2
 732:	83 bf       	out	0x33, r24	; 51
						/*Check whether it is polled or not*/
						if(sgau8_Interrupt_Mode[TIMER0]==POLLING)
 734:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <sgau8_Interrupt_Mode>
 738:	81 11       	cpse	r24, r1
 73a:	14 c0       	rjmp	.+40     	; 0x764 <Timer_Start+0x58>
						{                            
							/*Loop  until it get the time of delay in micro*/
							while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
 73c:	21 15       	cp	r18, r1
 73e:	31 05       	cpc	r19, r1
 740:	09 f4       	brne	.+2      	; 0x744 <Timer_Start+0x38>
 742:	61 c0       	rjmp	.+194    	; 0x806 <Timer_Start+0xfa>
	uint16_t u16_Count_TIMER_Start=0;
 744:	50 e0       	ldi	r21, 0x00	; 0
 746:	40 e0       	ldi	r20, 0x00	; 0
								/************************************************************
								 * The prescale divide by 8 and  make countER =1 to get 
								 * 1 microsecond
								 ************************************************************/
								SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT);								 
								TIMER0_COMPARE_Register=1U;
 748:	61 e0       	ldi	r22, 0x01	; 1
								SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT);								 
 74a:	98 b7       	in	r25, 0x38	; 56
 74c:	92 60       	ori	r25, 0x02	; 2
 74e:	98 bf       	out	0x38, r25	; 56
								TIMER0_COMPARE_Register=1U;
 750:	6c bf       	out	0x3c, r22	; 60
								/*Loop  until overflow happens*/
								while( BIT_IS_CLR(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT) );
 752:	08 b6       	in	r0, 0x38	; 56
 754:	01 fe       	sbrs	r0, 1
 756:	fd cf       	rjmp	.-6      	; 0x752 <Timer_Start+0x46>
								u16_Count_TIMER_Start++;
 758:	4f 5f       	subi	r20, 0xFF	; 255
 75a:	5f 4f       	sbci	r21, 0xFF	; 255
							while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
 75c:	24 17       	cp	r18, r20
 75e:	35 07       	cpc	r19, r21
 760:	a1 f7       	brne	.-24     	; 0x74a <Timer_Start+0x3e>
 762:	08 95       	ret
							}
							
						}
			
						else if(sgau8_Interrupt_Mode[TIMER0]==INTERRUPT)
 764:	81 30       	cpi	r24, 0x01	; 1
 766:	11 f0       	breq	.+4      	; 0x76c <Timer_Start+0x60>
		{
			return TIMER_ERROR_NOK;
		}
		break;			
	}
	return TIMER_ERROR_OK;
 768:	84 2f       	mov	r24, r20
 76a:	08 95       	ret
						     SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT);								 
 76c:	88 b7       	in	r24, 0x38	; 56
 76e:	82 60       	ori	r24, 0x02	; 2
 770:	88 bf       	out	0x38, r24	; 56
							 TIMER0_COMPARE_Register=1U;
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	8c bf       	out	0x3c, r24	; 60
				             Timer_0_OCF_INT_EN();			  
 776:	89 b7       	in	r24, 0x39	; 57
 778:	82 60       	ori	r24, 0x02	; 2
 77a:	89 bf       	out	0x39, r24	; 57
							 sgpfun_TIMER0_CMP_ISR_Function=PntrToFunc_t_Copy_TIMER_Start_ISR;													
 77c:	70 93 93 00 	sts	0x0093, r23	; 0x800093 <sgpfun_TIMER0_CMP_ISR_Function+0x1>
 780:	60 93 92 00 	sts	0x0092, r22	; 0x800092 <sgpfun_TIMER0_CMP_ISR_Function>
	return TIMER_ERROR_OK;
 784:	84 2f       	mov	r24, r20
 786:	08 95       	ret
				else if(sgau8_TIMERMode[TIMER0]==TIMER_MODE_MILIE)
 788:	42 30       	cpi	r20, 0x02	; 2
 78a:	11 f0       	breq	.+4      	; 0x790 <Timer_Start+0x84>
	return TIMER_ERROR_OK;
 78c:	89 2f       	mov	r24, r25
 78e:	08 95       	ret
						TIMER0_CNTRL_REG|=F_CPU_CLOCK_64_TIMER_0;	
 790:	83 b7       	in	r24, 0x33	; 51
 792:	83 60       	ori	r24, 0x03	; 3
 794:	83 bf       	out	0x33, r24	; 51
						if(sgau8_Interrupt_Mode[TIMER0]==POLLING)
 796:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <sgau8_Interrupt_Mode>
 79a:	81 11       	cpse	r24, r1
 79c:	13 c0       	rjmp	.+38     	; 0x7c4 <Timer_Start+0xb8>
							while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
 79e:	21 15       	cp	r18, r1
 7a0:	31 05       	cpc	r19, r1
 7a2:	89 f1       	breq	.+98     	; 0x806 <Timer_Start+0xfa>
	uint16_t u16_Count_TIMER_Start=0;
 7a4:	50 e0       	ldi	r21, 0x00	; 0
 7a6:	40 e0       	ldi	r20, 0x00	; 0
								TIMER0_COMPARE_Register=125U;
 7a8:	6d e7       	ldi	r22, 0x7D	; 125
								SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT);								 
 7aa:	98 b7       	in	r25, 0x38	; 56
 7ac:	92 60       	ori	r25, 0x02	; 2
 7ae:	98 bf       	out	0x38, r25	; 56
								TIMER0_COMPARE_Register=125U;
 7b0:	6c bf       	out	0x3c, r22	; 60
								while( BIT_IS_CLR(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT) );
 7b2:	08 b6       	in	r0, 0x38	; 56
 7b4:	01 fe       	sbrs	r0, 1
 7b6:	fd cf       	rjmp	.-6      	; 0x7b2 <Timer_Start+0xa6>
								u16_Count_TIMER_Start++;
 7b8:	4f 5f       	subi	r20, 0xFF	; 255
 7ba:	5f 4f       	sbci	r21, 0xFF	; 255
							while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
 7bc:	24 17       	cp	r18, r20
 7be:	35 07       	cpc	r19, r21
 7c0:	a1 f7       	brne	.-24     	; 0x7aa <Timer_Start+0x9e>
 7c2:	08 95       	ret
						else if(sgau8_Interrupt_Mode[TIMER0]==INTERRUPT)
 7c4:	81 30       	cpi	r24, 0x01	; 1
 7c6:	11 f0       	breq	.+4      	; 0x7cc <Timer_Start+0xc0>
	return TIMER_ERROR_OK;
 7c8:	89 2f       	mov	r24, r25
 7ca:	08 95       	ret
						     SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT);								 
 7cc:	88 b7       	in	r24, 0x38	; 56
 7ce:	82 60       	ori	r24, 0x02	; 2
 7d0:	88 bf       	out	0x38, r24	; 56
							 TIMER0_COMPARE_Register=125U;
 7d2:	8d e7       	ldi	r24, 0x7D	; 125
 7d4:	8c bf       	out	0x3c, r24	; 60
				             Timer_0_OCF_INT_EN();			  
 7d6:	89 b7       	in	r24, 0x39	; 57
 7d8:	82 60       	ori	r24, 0x02	; 2
 7da:	89 bf       	out	0x39, r24	; 57
							 sgpfun_TIMER0_CMP_ISR_Function=PntrToFunc_t_Copy_TIMER_Start_ISR;												
 7dc:	70 93 93 00 	sts	0x0093, r23	; 0x800093 <sgpfun_TIMER0_CMP_ISR_Function+0x1>
 7e0:	60 93 92 00 	sts	0x0092, r22	; 0x800092 <sgpfun_TIMER0_CMP_ISR_Function>
	return TIMER_ERROR_OK;
 7e4:	89 2f       	mov	r24, r25
 7e6:	08 95       	ret
				if(sgau8_Interrupt_Mode[TIMER0]==POLLING)
 7e8:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <sgau8_Interrupt_Mode>
 7ec:	81 11       	cpse	r24, r1
 7ee:	08 c0       	rjmp	.+16     	; 0x800 <Timer_Start+0xf4>
                    SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT);
 7f0:	98 b7       	in	r25, 0x38	; 56
 7f2:	92 60       	ori	r25, 0x02	; 2
 7f4:	98 bf       	out	0x38, r25	; 56
				    TIMER0_COMPARE_Register=u32_Copy_TIMER_Start_tickCounts;
 7f6:	2c bf       	out	0x3c, r18	; 60
					while( BIT_IS_CLR(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT) );
 7f8:	08 b6       	in	r0, 0x38	; 56
 7fa:	01 fe       	sbrs	r0, 1
 7fc:	fd cf       	rjmp	.-6      	; 0x7f8 <Timer_Start+0xec>
 7fe:	08 95       	ret
				else if(sgau8_Interrupt_Mode[TIMER0]==INTERRUPT)
 800:	81 30       	cpi	r24, 0x01	; 1
 802:	11 f0       	breq	.+4      	; 0x808 <Timer_Start+0xfc>
	return TIMER_ERROR_OK;
 804:	89 2f       	mov	r24, r25
}
 806:	08 95       	ret
					 SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT);								 
 808:	88 b7       	in	r24, 0x38	; 56
 80a:	82 60       	ori	r24, 0x02	; 2
 80c:	88 bf       	out	0x38, r24	; 56
					 TIMER0_COMPARE_Register=u32_Copy_TIMER_Start_tickCounts;
 80e:	2c bf       	out	0x3c, r18	; 60
					 Timer_0_OCF_INT_EN();			  
 810:	89 b7       	in	r24, 0x39	; 57
 812:	82 60       	ori	r24, 0x02	; 2
 814:	89 bf       	out	0x39, r24	; 57
					 sgpfun_TIMER0_CMP_ISR_Function=PntrToFunc_t_Copy_TIMER_Start_ISR;						
 816:	70 93 93 00 	sts	0x0093, r23	; 0x800093 <sgpfun_TIMER0_CMP_ISR_Function+0x1>
 81a:	60 93 92 00 	sts	0x0092, r22	; 0x800092 <sgpfun_TIMER0_CMP_ISR_Function>
	return TIMER_ERROR_OK;
 81e:	89 2f       	mov	r24, r25
 820:	08 95       	ret
			return TIMER_ERROR_NOK;
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	08 95       	ret

00000826 <__vector_10>:
	
	return TIMER_ERROR_OK;
}

Timer_ISR(TIMER0_COMP_VECTOR)
{
 826:	1f 92       	push	r1
 828:	0f 92       	push	r0
 82a:	0f b6       	in	r0, 0x3f	; 63
 82c:	0f 92       	push	r0
 82e:	11 24       	eor	r1, r1
 830:	2f 93       	push	r18
 832:	3f 93       	push	r19
 834:	4f 93       	push	r20
 836:	5f 93       	push	r21
 838:	6f 93       	push	r22
 83a:	7f 93       	push	r23
 83c:	8f 93       	push	r24
 83e:	9f 93       	push	r25
 840:	af 93       	push	r26
 842:	bf 93       	push	r27
 844:	ef 93       	push	r30
 846:	ff 93       	push	r31
    sgpfun_TIMER0_CMP_ISR_Function();
 848:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <sgpfun_TIMER0_CMP_ISR_Function>
 84c:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <sgpfun_TIMER0_CMP_ISR_Function+0x1>
 850:	09 95       	icall
}
 852:	ff 91       	pop	r31
 854:	ef 91       	pop	r30
 856:	bf 91       	pop	r27
 858:	af 91       	pop	r26
 85a:	9f 91       	pop	r25
 85c:	8f 91       	pop	r24
 85e:	7f 91       	pop	r23
 860:	6f 91       	pop	r22
 862:	5f 91       	pop	r21
 864:	4f 91       	pop	r20
 866:	3f 91       	pop	r19
 868:	2f 91       	pop	r18
 86a:	0f 90       	pop	r0
 86c:	0f be       	out	0x3f, r0	; 63
 86e:	0f 90       	pop	r0
 870:	1f 90       	pop	r1
 872:	18 95       	reti

00000874 <__vector_7>:
Timer_ISR(TIMER1_COMPA_VECTOR)
{
 874:	1f 92       	push	r1
 876:	0f 92       	push	r0
 878:	0f b6       	in	r0, 0x3f	; 63
 87a:	0f 92       	push	r0
 87c:	11 24       	eor	r1, r1
 87e:	2f 93       	push	r18
 880:	3f 93       	push	r19
 882:	4f 93       	push	r20
 884:	5f 93       	push	r21
 886:	6f 93       	push	r22
 888:	7f 93       	push	r23
 88a:	8f 93       	push	r24
 88c:	9f 93       	push	r25
 88e:	af 93       	push	r26
 890:	bf 93       	push	r27
 892:	ef 93       	push	r30
 894:	ff 93       	push	r31

	sgpfun_TIMER0_CMPA_ISR_Function();
 896:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <sgpfun_TIMER0_CMPA_ISR_Function>
 89a:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <sgpfun_TIMER0_CMPA_ISR_Function+0x1>
 89e:	09 95       	icall
}
 8a0:	ff 91       	pop	r31
 8a2:	ef 91       	pop	r30
 8a4:	bf 91       	pop	r27
 8a6:	af 91       	pop	r26
 8a8:	9f 91       	pop	r25
 8aa:	8f 91       	pop	r24
 8ac:	7f 91       	pop	r23
 8ae:	6f 91       	pop	r22
 8b0:	5f 91       	pop	r21
 8b2:	4f 91       	pop	r20
 8b4:	3f 91       	pop	r19
 8b6:	2f 91       	pop	r18
 8b8:	0f 90       	pop	r0
 8ba:	0f be       	out	0x3f, r0	; 63
 8bc:	0f 90       	pop	r0
 8be:	1f 90       	pop	r1
 8c0:	18 95       	reti

000008c2 <__vector_8>:

Timer_ISR(TIMER1_COMPB_VECTOR)
{
 8c2:	1f 92       	push	r1
 8c4:	0f 92       	push	r0
 8c6:	0f b6       	in	r0, 0x3f	; 63
 8c8:	0f 92       	push	r0
 8ca:	11 24       	eor	r1, r1
 8cc:	2f 93       	push	r18
 8ce:	3f 93       	push	r19
 8d0:	4f 93       	push	r20
 8d2:	5f 93       	push	r21
 8d4:	6f 93       	push	r22
 8d6:	7f 93       	push	r23
 8d8:	8f 93       	push	r24
 8da:	9f 93       	push	r25
 8dc:	af 93       	push	r26
 8de:	bf 93       	push	r27
 8e0:	ef 93       	push	r30
 8e2:	ff 93       	push	r31
	sgpfun_TIMER0_CMPB_ISR_Function();
 8e4:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <sgpfun_TIMER0_CMPB_ISR_Function>
 8e8:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <sgpfun_TIMER0_CMPB_ISR_Function+0x1>
 8ec:	09 95       	icall
}
 8ee:	ff 91       	pop	r31
 8f0:	ef 91       	pop	r30
 8f2:	bf 91       	pop	r27
 8f4:	af 91       	pop	r26
 8f6:	9f 91       	pop	r25
 8f8:	8f 91       	pop	r24
 8fa:	7f 91       	pop	r23
 8fc:	6f 91       	pop	r22
 8fe:	5f 91       	pop	r21
 900:	4f 91       	pop	r20
 902:	3f 91       	pop	r19
 904:	2f 91       	pop	r18
 906:	0f 90       	pop	r0
 908:	0f be       	out	0x3f, r0	; 63
 90a:	0f 90       	pop	r0
 90c:	1f 90       	pop	r1
 90e:	18 95       	reti

00000910 <__vector_4>:
Timer_ISR(TIMER2_COMP_VECTOR)
{
 910:	1f 92       	push	r1
 912:	0f 92       	push	r0
 914:	0f b6       	in	r0, 0x3f	; 63
 916:	0f 92       	push	r0
 918:	11 24       	eor	r1, r1
 91a:	2f 93       	push	r18
 91c:	3f 93       	push	r19
 91e:	4f 93       	push	r20
 920:	5f 93       	push	r21
 922:	6f 93       	push	r22
 924:	7f 93       	push	r23
 926:	8f 93       	push	r24
 928:	9f 93       	push	r25
 92a:	af 93       	push	r26
 92c:	bf 93       	push	r27
 92e:	ef 93       	push	r30
 930:	ff 93       	push	r31
	sgpfun_TIMER2_CMP_ISR_Function();
 932:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <sgpfun_TIMER2_CMP_ISR_Function>
 936:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <sgpfun_TIMER2_CMP_ISR_Function+0x1>
 93a:	09 95       	icall
 93c:	ff 91       	pop	r31
 93e:	ef 91       	pop	r30
 940:	bf 91       	pop	r27
 942:	af 91       	pop	r26
 944:	9f 91       	pop	r25
 946:	8f 91       	pop	r24
 948:	7f 91       	pop	r23
 94a:	6f 91       	pop	r22
 94c:	5f 91       	pop	r21
 94e:	4f 91       	pop	r20
 950:	3f 91       	pop	r19
 952:	2f 91       	pop	r18
 954:	0f 90       	pop	r0
 956:	0f be       	out	0x3f, r0	; 63
 958:	0f 90       	pop	r0
 95a:	1f 90       	pop	r1
 95c:	18 95       	reti

0000095e <__mulsi3>:
 95e:	db 01       	movw	r26, r22
 960:	8f 93       	push	r24
 962:	9f 93       	push	r25
 964:	0e 94 bf 04 	call	0x97e	; 0x97e <__muluhisi3>
 968:	bf 91       	pop	r27
 96a:	af 91       	pop	r26
 96c:	a2 9f       	mul	r26, r18
 96e:	80 0d       	add	r24, r0
 970:	91 1d       	adc	r25, r1
 972:	a3 9f       	mul	r26, r19
 974:	90 0d       	add	r25, r0
 976:	b2 9f       	mul	r27, r18
 978:	90 0d       	add	r25, r0
 97a:	11 24       	eor	r1, r1
 97c:	08 95       	ret

0000097e <__muluhisi3>:
 97e:	0e 94 ca 04 	call	0x994	; 0x994 <__umulhisi3>
 982:	a5 9f       	mul	r26, r21
 984:	90 0d       	add	r25, r0
 986:	b4 9f       	mul	r27, r20
 988:	90 0d       	add	r25, r0
 98a:	a4 9f       	mul	r26, r20
 98c:	80 0d       	add	r24, r0
 98e:	91 1d       	adc	r25, r1
 990:	11 24       	eor	r1, r1
 992:	08 95       	ret

00000994 <__umulhisi3>:
 994:	a2 9f       	mul	r26, r18
 996:	b0 01       	movw	r22, r0
 998:	b3 9f       	mul	r27, r19
 99a:	c0 01       	movw	r24, r0
 99c:	a3 9f       	mul	r26, r19
 99e:	70 0d       	add	r23, r0
 9a0:	81 1d       	adc	r24, r1
 9a2:	11 24       	eor	r1, r1
 9a4:	91 1d       	adc	r25, r1
 9a6:	b2 9f       	mul	r27, r18
 9a8:	70 0d       	add	r23, r0
 9aa:	81 1d       	adc	r24, r1
 9ac:	11 24       	eor	r1, r1
 9ae:	91 1d       	adc	r25, r1
 9b0:	08 95       	ret

000009b2 <_exit>:
 9b2:	f8 94       	cli

000009b4 <__stop_program>:
 9b4:	ff cf       	rjmp	.-2      	; 0x9b4 <__stop_program>
